#include "stdlib.fc";

;; Deal statuses
;; tons onboarded
;; nft onboarded
;; jettons onboarded
;; deal initiated (if tons, nft, jettons onboarded)
;; deal revoked
;; deal terminated

global cell owners;
global cell swaps; ;; slice peer_addr // int deal_status, cell deal_flags, slice initiator_address,  int timeout, int amount, cell initiator_nft, cell initiator_jettons, int peer_amount, cell peer_nft, cell peer_jetton
global cell config; ;; int ton_fee, int jetton_fee

;; Deal statuses
;; initiated
;; active (assets onboarded)

;; NFT Check
global cell nft_item_code;
global cell nft_collection_addr;

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() calculate_swap_contract_state_init(int index) {
    
}

() calculate_swap_contract_addr(cell state_init) {

}

() conduct_deal(int hello_world) {

}

() save_data() impure inline {
    ~strdump("Start save_data()");
    set_data(
        begin_cell()
          .store_ref(owners)
          .store_ref(swap)
          .store_ref(config)
        .end_cell()
    );
    ~strdump("End save_data()");
}

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (op = op::start_deal) {
      ;; 
      ;; If from HEX Collection, no fee
      ;; Check if fee in HEX Jettons
      ;; If more than 1001 swap-contracts, send msg to swap-minter
      cell msg = begin_cell()
          .store_uint(0x10, 6)
          .store_slice(a_dao_master)
          .store_coins(transaction_fee)
          .store_uint(1, 107)
          .store_ref(
              begin_cell()
                  .store_uint(op, 32)
                  .store_uint(transaction_type, 32)
              .end_cell()
          )
      .end_cell();
      send_raw_message(msg, 1);

    }

    ;; if from collection X that free

    if (op = op::transfer_notification()) {

      if () { ;; all assets in
        conduct_deal();
      }

    }

    if (op = op::op::transfer_notification()) {

      if () { ;; all assets in
        conduct_deal();
      }

    }

    if ()
    
}

() get_index() {

}